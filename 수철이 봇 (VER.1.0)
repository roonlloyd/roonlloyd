import sys
from PySide6.QtWidgets import QApplication, QWidget, QMainWindow


import threading

import discord
from distutils import command
from discord.ext import commands
from discord.ext.commands import Bot, CommandNotFound, Context

import asyncio, discord, base64, ffmpeg, io
from distutils import command
from io import BytesIO
from gtts import gTTS

import queue

from pydub import AudioSegment
from pydub.playback import play
import os

# -*- coding: utf-8 -*-

################################################################################
## Form generated from reading UI file 'loginMieyPA.ui'
##
## Created by: Qt User Interface Compiler version 6.6.1
##
## WARNING! All changes made in this file will be lost when recompiling UI file!
################################################################################

from PySide6.QtCore import (QCoreApplication, QDate, QDateTime, QLocale,
    QMetaObject, QObject, QPoint, QRect,
    QSize, QTime, QUrl, Qt)
from PySide6.QtGui import (QBrush, QColor, QConicalGradient, QCursor,
    QFont, QFontDatabase, QGradient, QIcon,
    QImage, QKeySequence, QLinearGradient, QPainter,
    QPalette, QPixmap, QRadialGradient, QTransform)
from PySide6.QtWidgets import (QApplication, QDialog, QLabel, QLineEdit,
    QListWidget, QListWidgetItem, QSizePolicy, QSlider,
    QTabWidget, QWidget)

class Ui_Dialog(object):
    def setupUi(self, Dialog):
        if not Dialog.objectName():
            Dialog.setObjectName(u"Dialog")
        Dialog.resize(700, 436)
        self.background = QLabel(Dialog)
        self.background.setObjectName(u"background")
        self.background.setGeometry(QRect(0, 0, 700, 591))
        self.background.setStyleSheet(u"background-color:white\n"
"")
        self.tts_text = QLineEdit(Dialog)
        self.tts_text.setObjectName(u"tts_text")
        self.tts_text.setGeometry(QRect(100, 150, 181, 41))
        self.tts_text.setAlignment(Qt.AlignCenter)
        self.label = QLabel(Dialog)
        self.label.setObjectName(u"label")
        self.label.setGeometry(QRect(320, 220, 411, 221))
        self.label.setStyleSheet(u"color:rgb(255, 0, 0)")
        self.label_2 = QLabel(Dialog)
        self.label_2.setObjectName(u"label_2")
        self.label_2.setGeometry(QRect(10, 10, 241, 91))
        font = QFont()
        font.setFamilies([u"\ubc30\ub2ec\uc758\ubbfc\uc871 \ub3c4\ud604"])
        font.setPointSize(28)
        self.label_2.setFont(font)
        self.pitch_controler = QSlider(Dialog)
        self.pitch_controler.setObjectName(u"pitch_controler")
        self.pitch_controler.setGeometry(QRect(30, 230, 31, 200))
        self.pitch_controler.setCursor(QCursor(Qt.ArrowCursor))
        self.pitch_controler.setMinimum(-10)
        self.pitch_controler.setMaximum(10)
        self.pitch_controler.setOrientation(Qt.Vertical)
        self.label_3 = QLabel(Dialog)
        self.label_3.setObjectName(u"label_3")
        self.label_3.setGeometry(QRect(10, 210, 81, 21))
        self.label_4 = QLabel(Dialog)
        self.label_4.setObjectName(u"label_4")
        self.label_4.setGeometry(QRect(20, 230, 51, 200))
        self.label_4.setStyleSheet(u"background-color:rgb(132, 132, 132)")
        self.tabWidget = QTabWidget(Dialog)
        self.tabWidget.setObjectName(u"tabWidget")
        self.tabWidget.setGeometry(QRect(380, 0, 211, 251))
        self.widget = QWidget()
        self.widget.setObjectName(u"widget")
        self.tab1_background = QLabel(self.widget)
        self.tab1_background.setObjectName(u"tab1_background")
        self.tab1_background.setGeometry(QRect(0, 0, 211, 221))
        self.tab1_background.setStyleSheet(u"background-color:rgb(198, 198, 198)\n"
"")
        self.label_chat_channel = QLabel(self.widget)
        self.label_chat_channel.setObjectName(u"label_chat_channel")
        self.label_chat_channel.setGeometry(QRect(10, 40, 91, 16))
        self.label_chat_send = QLabel(self.widget)
        self.label_chat_send.setObjectName(u"label_chat_send")
        self.label_chat_send.setGeometry(QRect(10, 150, 71, 16))
        self.chat_channel_line_edit = QLineEdit(self.widget)
        self.chat_channel_line_edit.setObjectName(u"chat_channel_line_edit")
        self.chat_channel_line_edit.setGeometry(QRect(10, 60, 113, 22))
        self.chat_send_lineedit = QLineEdit(self.widget)
        self.chat_send_lineedit.setObjectName(u"chat_send_lineedit")
        self.chat_send_lineedit.setGeometry(QRect(10, 170, 171, 41))
        self.current_chat_channel = QLabel(self.widget)
        self.current_chat_channel.setObjectName(u"current_chat_channel")
        self.current_chat_channel.setGeometry(QRect(10, 100, 51, 16))
        self.current_chat_channel.setStyleSheet(u"background-color:rgb(251, 233, 255);\n"
"")
        self.show_current_chat_channel = QLabel(self.widget)
        self.show_current_chat_channel.setObjectName(u"show_current_chat_channel")
        self.show_current_chat_channel.setGeometry(QRect(70, 100, 131, 16))
        self.show_current_chat_channel.setStyleSheet(u"border-color: rgb(0, 0, 0);\n"
"background-color: rgb(216, 255, 216);")
        self.tabWidget.addTab(self.widget, "")
        self.tab = QWidget()
        self.tab.setObjectName(u"tab")
        self.tts_history = QListWidget(self.tab)
        self.tts_history.setObjectName(u"tts_history")
        self.tts_history.setGeometry(QRect(0, 0, 211, 221))
        self.tabWidget.addTab(self.tab, "")
        self.background.raise_()
        self.tts_text.raise_()
        self.label.raise_()
        self.label_2.raise_()
        self.label_3.raise_()
        self.label_4.raise_()
        self.pitch_controler.raise_()
        self.tabWidget.raise_()

        self.retranslateUi(Dialog)

        self.tabWidget.setCurrentIndex(0)


        QMetaObject.connectSlotsByName(Dialog)
    # setupUi

    def retranslateUi(self, Dialog):
        Dialog.setWindowTitle(QCoreApplication.translate("Dialog", u"Dialog", None))
        self.background.setText("")
        self.tts_text.setPlaceholderText(QCoreApplication.translate("Dialog", u"\ud14d\uc2a4\ud2b8\ub97c \uc785\ub825\ud558\uc138\uc694", None))
        self.label.setText(QCoreApplication.translate("Dialog", u"<html><head/><body><p>\uc0ac\uc6a9\ubc95<br/>\ud14d\uc2a4\ud2b8\ub97c \uc785\ub825\ud558\uace0 \uc5d4\ud130\ub97c \ub204\ub978\ub2e4<br/>\uadf8\ub7fc \ubd07\uc774 \uc54c\uc544\uc11c \ub4e4\uc5b4\uc640\uc11c \uc791\ub3d9\ud55c\ub2e4<br/><br/>*\uc8fc\uc758\uc0ac\ud56d*<br/>\uc57c\ub9e4\ub85c \ub9cc\ub4e0\uac70\ub77c \ubc84\uadf8 \ub0a0\uc218\ub3c4 \uc788\uc74c<br/>\ub9d0\ud558\uace0 \uc788\ub294\ub370 \uc0c8\ub85c\uc6b4 \ud14d\uc2a4\ud2b8 \uc785\ub825\ud558\uba74 \ub4a4\uc5d0 \uc785\ub825\ud55c\uac70 \ucd9c\ub825 \uc548\ub428</p><p>\uc74c\uc131\ucc44\ub110 \uc548\ub4e4\uc5b4\uac00\uace0 \ud504\ub85c\uadf8\ub7a8 \uc2e4\ud589\ud558\uba74 \uc791\ub3d9 \uc548\ub428<br/>\uc12c\uc138\ud55c \uce5c\uad6c\ub2c8\uae50 \ub9c9 \uac74\ub4dc\ub9ac\uc9c0 \ub9c8\uc148<br/>\uc218\ucca0\uc774 \ubd07 \uc5c6\ub294 \uc11c\ubc84\ub294 \uc791\ub3d9 \uc548\ud568 \uc218\ucca0\uc774 \ubd07\uc774\ub791 \uc138\ud2b8\uc784<br/>by.k_jam</p></body></html>", None))
        self.label_2.setText(QCoreApplication.translate("Dialog", u"\uc218\ucca0\uc774 TTS \ubd07", None))
        self.label_3.setText(QCoreApplication.translate("Dialog", u"\ubaa9\uc18c\ub9ac \uc870\uc808\uae30", None))
        self.label_4.setText("")
        self.tab1_background.setText("")
        self.label_chat_channel.setText(QCoreApplication.translate("Dialog", u"\ucc44\ud305 \ucc44\ub110 \uc544\uc774\ub514", None))
        self.label_chat_send.setText(QCoreApplication.translate("Dialog", u"\ucc44\ud305 \ubcf4\ub0b4\uae30", None))
        self.chat_channel_line_edit.setPlaceholderText(QCoreApplication.translate("Dialog", u"\ucc44\ud305 \ucc44\ub110 \uc544\uc774\ub514", None))
        self.chat_send_lineedit.setPlaceholderText(QCoreApplication.translate("Dialog", u"\ucc44\ud305\uc744 \uc785\ub825\ud558\uc138\uc694", None))
        self.current_chat_channel.setText(QCoreApplication.translate("Dialog", u"\ud604\uc7ac \ucc44\ub110", None))
        self.show_current_chat_channel.setText(QCoreApplication.translate("Dialog", u"NONE", None))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.widget), QCoreApplication.translate("Dialog", u"\ucc44\ud305 \ubcf4\ub0b4\uae30", None))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), QCoreApplication.translate("Dialog", u"\ud788\uc2a4\ud1a0\ub9ac", None))
    # retranslateUi





class Login_Window(QMainWindow, Ui_Dialog):
    def __init__(self):
            super(Login_Window, self).__init__()
            self.setupUi(self)

            self.pitch_controler.valueChanged.connect(self.showVerticalSliderValue)

            self.tts_text.returnPressed.connect(self.printTextFunction)

            self.chat_channel_line_edit.returnPressed.connect(self.chat_channel_id_set)

            self.chat_send_lineedit.returnPressed.connect(self.chat_send)

            


    def chat_channel_id_set(self):
        global chat_id
        chat_id = self.chat_channel_line_edit.text()
        print(chat_id)
        self.chat_channel_line_edit.setText("")
        self.show_current_chat_channel.setText(chat_id)



    def chat_send(self):
        global CSC
        CSC = self.chat_send_lineedit.text()
        if chat_id:
            CS_queue.put(CSC)
        else:
            print("No channel ID set.")
        self.chat_send_lineedit.setText("")


    def printTextFunction(self) :
        global text_content
        text_content = self.tts_text.text()
        self.tts_history.addItem(text_content)
        message_queue.put(text_content)
        self.tts_text.setText("")
        

    def showVerticalSliderValue(self) :
        global pitch
        pitch = self.pitch_controler.value()
        global shifted_semitones
        shifted_semitones = pitch



message_queue = queue.Queue()
CS_queue = queue.Queue()


pitch = 0
shifted_semitones = 0
voice_client = None
sound = gTTS(text="시험 1", lang="ko", slow=False)
sound.save("audio.mp3")
client = commands.Bot(command_prefix='수철아 ', intents=discord.Intents.all())


def change_pitch(audio_file, semitones):

    song = AudioSegment.from_file(audio_file)

    new_song = song._spawn(song.raw_data, overrides={
        "frame_rate": int(song.frame_rate * (2 ** (semitones / 12.0)))
    }).set_frame_rate(song.frame_rate)

    return new_song


def start_discord_bot():
    global voice_client
    client = commands.Bot(command_prefix='수철아 ', intents=discord.Intents.all())
    
    @client.event
    async def on_ready():
        client.loop.create_task(check_queue())
        print("reday!".format(client))
   



    async def check_queue():
        while True:
            if not message_queue.empty():
                text = message_queue.get()
                await play_audio()
            if not CS_queue.empty():
                text1 = CS_queue.get()
                await send_message_to_channel(chat_id, CSC)
            await asyncio.sleep(1)


    @client.event
    async def send_message_to_channel(channel_id, message):
        channel = client.get_channel(int(channel_id))
        if channel:
            await channel.send(message)
        else:
            print(f"Channel with id {channel_id} not found.")   



    @client.event
    async def play_audio():
        global voice_client
        user_id = 574391901810065419
        voice_channel = None
        for guild in client.guilds:
            for member in guild.members:
                if member.id == user_id and member.voice:
                    voice_channel = member.voice.channel
                    break
            if voice_channel:
                break
        
        text = text_content
        sound = gTTS(text=text, lang="ko", slow=False)
        sound.save("audio.mp3")
        modified_song = change_pitch("audio.mp3", shifted_semitones)
        modified_song.export("modified_audio.mp3", format="mp3")

        if voice_client is None or not voice_client.is_connected():
            voice_client = await voice_channel.connect()

        voice_client.play(discord.FFmpegPCMAudio('modified_audio.mp3'), after=None)

    client.run('MTEzNjE5MTg2Nzc0MzExMzI2OA.GxZcv3.OkpzvOTPBJd_wvU6je8xl9PYvuZDN47c-DIhG8')

app = QApplication(sys.argv)
window = Login_Window()
window.show()

bot_thread = threading.Thread(target=start_discord_bot)
bot_thread.daemon = True
bot_thread.start()

sys.exit(app.exec())
